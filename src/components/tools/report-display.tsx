'use client';
import { useRef, useState } from 'react';
import { Button } from '@/components/ui/button';
import { Download, Loader2 } from 'lucide-react';
import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';

interface ReportDisplayProps {
    title: string;
    fileName: string;
    children: React.ReactNode;
}

export function ReportDisplay({ title, fileName, children }: ReportDisplayProps) {
    const reportRef = useRef<HTMLDivElement>(null);
    const [isLoading, setIsLoading] = useState(false);

    const handleDownload = async () => {
        const elementToCapture = reportRef.current;
        if (!elementToCapture) return;

        setIsLoading(true);

        const pdfContainer = document.createElement('div');
        pdfContainer.style.position = 'absolute';
        pdfContainer.style.left = '-9999px';
        pdfContainer.style.width = '794px';
        pdfContainer.style.padding = '20px';
        pdfContainer.style.backgroundColor = 'white';
        pdfContainer.style.fontFamily = 'Inter, sans-serif';
        pdfContainer.style.color = 'black';

        const contentClone = elementToCapture.cloneNode(true) as HTMLElement;
        
        const header = document.createElement('div');
        header.innerHTML = `<h1 style="font-size: 24px; font-weight: bold; text-align: center; color: #673AB7; margin-bottom: 8px;">Seabed2Crest AstroTalk</h1><h2 style="font-size: 18px; font-weight: 600; text-align: center; color: #333; margin-bottom: 20px; border-bottom: 1px solid #eee; padding-bottom: 10px;">${title}</h2>`;

        const footer = document.createElement('div');
        footer.innerHTML = `<p style="font-size: 10px; text-align: center; color: #aaa; margin-top: 20px; border-top: 1px solid #eee; padding-top: 10px;">Report generated by Seabed2Crest AstroTalk | &copy; ${new Date().getFullYear()}</p>`;

        pdfContainer.appendChild(header);
        pdfContainer.appendChild(contentClone);
        pdfContainer.appendChild(footer);

        document.body.appendChild(pdfContainer);

        try {
            const canvas = await html2canvas(pdfContainer, { scale: 2, useCORS: true });
            const data = canvas.toDataURL('image/png');

            const pdf = new jsPDF('p', 'mm', 'a4');
            const pdfWidth = pdf.internal.pageSize.getWidth();
            const pdfHeight = (canvas.height * pdfWidth) / canvas.width;

            let heightLeft = pdfHeight;
            let position = 0;

            pdf.addImage(data, 'PNG', 0, position, pdfWidth, pdfHeight);
            heightLeft -= pdf.internal.pageSize.getHeight();

            while (heightLeft > 0) {
                position -= pdf.internal.pageSize.getHeight();
                pdf.addPage();
                pdf.addImage(data, 'PNG', 0, position, pdfWidth, pdfHeight);
                heightLeft -= pdf.internal.pageSize.getHeight();
            }
            
            pdf.save(`${fileName}.pdf`);
        } catch(e) {
            console.error("Error generating PDF:", e);
        } finally {
            document.body.removeChild(pdfContainer);
            setIsLoading(false);
        }
    };

    return (
        <div className="mt-8">
             <div className="flex justify-end mb-4">
                <Button onClick={handleDownload} disabled={isLoading}>
                     {isLoading ? ( <Loader2 className="mr-2 h-4 w-4 animate-spin" /> ) : ( <Download className="mr-2 h-4 w-4" /> )}
                    {isLoading ? 'Generating...' : 'Download Report'}
                </Button>
            </div>
            <div ref={reportRef}>
                {children}
            </div>
        </div>
    );
}
